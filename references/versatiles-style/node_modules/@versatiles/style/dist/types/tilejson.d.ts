import type { VectorLayer } from './vector_layer.js';
/** Basic structure for TileJSON specification, applicable to both raster and vector types. */
export interface TileJSONSpecificationBasic {
    tilejson: '3.0.0';
    tiles: string[];
    attribution?: string;
    bounds?: [number, number, number, number];
    center?: [number, number];
    data?: string[];
    description?: string;
    fillzoom?: number;
    grids?: string[];
    legend?: string;
    maxzoom?: number;
    minzoom?: number;
    name?: string;
    scheme?: 'tms' | 'xyz';
    template?: string;
}
/** Structure for TileJSON specification of raster type, specifying raster-specific properties. */
export interface TileJSONSpecificationRaster extends TileJSONSpecificationBasic {
    type: 'raster';
    format: 'avif' | 'jpg' | 'png' | 'webp';
}
/** Structure for TileJSON specification of vector type, specifying vector-specific properties. */
export interface TileJSONSpecificationVector extends TileJSONSpecificationBasic {
    type: 'vector';
    format: 'pbf';
    vector_layers: VectorLayer[];
}
/** Represents a TileJSON specification, which can be either raster or vector. */
export type TileJSONSpecification = TileJSONSpecificationRaster | TileJSONSpecificationVector;
/**
* Checks if an object adheres to the TileJSON specification.
* Throws errors if the object does not conform to the expected structure or types.
*/
export declare function isTileJSONSpecification(spec: unknown): spec is TileJSONSpecification;
